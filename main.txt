package main

import (
	"encoding/json"
	"fmt"
	"net/http"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "Hello, World!")
}

func aboutHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "This is the about page.")
}

type Product struct {
	ID          int     `json:"id"`
	Title       string  `json:"title"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	ImageUrl    string  `json:"image_url"` // JSON tag for image URL
}

var productList []Product

func getProducts(w http.ResponseWriter, r *http.Request) {
	handleCors(w)
	handlePreflightReq(w, r)

	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	sendData(w, productList, 200)

}

func createProduct(w http.ResponseWriter, r *http.Request) {
	handleCors(w)
	handlePreflightReq(w, r)

	if r.Method == http.MethodOptions {
		// Handle preflight request for CORS
		w.WriteHeader(http.StatusOK)
		return
	}
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var newProduct Product
	decoder := json.NewDecoder(r.Body)
	err := decoder.Decode(&newProduct) // Decode the incoming JSON to a Product struct
	if err != nil {
		http.Error(w, "Invalid product data", http.StatusBadRequest)
		return
	}
	newProduct.ID = len(productList) + 1          // Assign a new ID
	productList = append(productList, newProduct) // Add the new product to the list
	sendData(w, newProduct, http.StatusCreated)

}

func handleCors(w http.ResponseWriter) {
	w.Header().Set("Access-Control-Allow-Origin", "*")                                  // Allow CORS
	w.Header().Set("Content-Type", "application/json")                                  // Set response content type to JSON
	w.Header().Set("Access-Control-Allow-Methods", "GET,POST,PUT,PATCH,DELETE,OPTIONS") // Allow POST method
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Farabi")              // Allow Content-Type header
}
func handlePreflightReq(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodOptions {
		// Handle preflight request for CORS
		w.WriteHeader(http.StatusOK)
	}
}
func sendData(w http.ResponseWriter, data interface{}, statusCode int) {
	w.WriteHeader(statusCode) // Set response status to Created
	encoder := json.NewEncoder(w)
	encoder.Encode(data) // Encode the new product as JSON and write to response
}

func main() {
	mux := http.NewServeMux()              //route multiplexer
	mux.HandleFunc("/hello", helloHandler) //route for /hello
	mux.HandleFunc("/about", aboutHandler) // route /about
	mux.HandleFunc("/products", getProducts)
	mux.HandleFunc("/create-products", createProduct)

	fmt.Println("Starting server on :3000")

	err := http.ListenAndServe(":3000", mux) // start the server on port 3000
	if err != nil {
		fmt.Println("Error starting server:", err)
	}
}

func init() {
	// Initialize some sample products
	prd1 := Product{
		ID: 1, Title: "Product 1", Description: "Description for product 1", Price: 19.99, ImageUrl: "http://example.com/image1.jpg",
	}
	prd2 := Product{
		ID: 2, Title: "Product 2", Description: "Description for product 2", Price: 29.99, ImageUrl: "http://example.com/image2.jpg",
	}
	prd3 := Product{
		ID: 3, Title: "Product 3", Description: "Description for product 3", Price: 39.99, ImageUrl: "http://example.com/image3.jpg",
	}
	productList = []Product{prd1, prd2, prd3} // Initialize the product list with sample products
}
